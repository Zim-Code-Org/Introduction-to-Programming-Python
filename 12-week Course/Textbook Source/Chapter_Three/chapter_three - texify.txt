\Chapter{Data Types}

Something that you might have learned in school is something like “data is information.” This is true. There are lots of different things you can do with data. For example, you can write words with letters, you can add numbers together etc. A computer only understands ones and zeroes (binary); this is how it stores all its data but this is useless to us because we cannot read it. Instead we want to store numbers like 7 or words like “Python”.
Fun fact: The IO symbol on power switches comes from binary; 0 is off and 1 is on.

We now have a new problem because we have many different data types and we want to do different things (operations) on them. For example, try the following code:

\begin{shell}
5 + ‘Python’
\end{shell}

This is your typical example of trying to add apples to oranges. It does not and should not work. This is because “5” and “Python” are different data types. Why do we need different data types? Different data types serve different purposes and thus have different operations.

\section{Integers}

What is an integer? You might remember what these are from form 1/2 mathematics. Integers are whole numbers with a + or – sign (e.g. 1, 5, -7, 345, 0, -111111). What examples can you give? Python refers to an integer in short as \icd{int}. Let’s do some operations on integers, you have done
some of these before:

\begin{shell}
\begin{enumerate}
\item 2 + 345
\item 34 – 54
\item 56//3
\item type(12) #Check the type of some data
\item x = 15
\item type(x)
\end{enumerate}
\end{shell}

The Line 4 and Line 6 use a type() function to check the type of some kind of data. We will go into more detail about functions in the next chapter. This works the same way as the input and print functions we used earlier. Notice that if you put something inside the brackets, it tells you what type it is.

\begin{toolbox} \textbf{Integers}
\begin{enumerate}
\item Mathematical operations (+, -, *, /, //, %, ** etc.)
\item type()
\end{enumerate}
\end{toolbox}

\begin{exercise} \textbf{Spot the integer}
Which of the following numbers are integers? Even if you think the answers are obvious, use the type() function in the shell to check.

\begin{enumerate}[label=\roman*]
\item 2 
\item 7*9 
\item 8/3-2 
\item 12*4/(3-2)+5 
\item 34//7
\end{enumerate}
\end{exercise}

\begin{exercise} \textbf{How to cast an integer}
Look at Toolbox 2.1. Which of those operations can give you an answer, which is not an integer. What kind of numbers do they give you?
\end{exercise}

\section{Floating Point Numbers}

We have looked at integers but is it possible to do calculations with just integers? No! We need to have some way of representing fractions and decimals like ½ or 0.3 or π. This is done using what are called floating point numbers. Python refers to a floating point number as a \icd{float}. They are always represented as decimals. There is no built in way to have an output as ½, it will always be 0.5. The decimal point is always the fullstop/period. Let’s do some examples:

\begin{shell}
\begin{enumerate}
\item 0.4 + 0.4
\item -2/3 #See footnote^(1)
\item x = 0.5
\item x * 4 #Line 4
\item type(0.3)
\item type(0)
\item type(0.0)
\item type(2/3)
\end{enumerate}
\end{shell}

Notice a few very important things:

Line 2 and 8: Dividing two integers and getting a fraction gives you a \icd{float}.
Line 4: Calculations involving a float always gives the answer as a \icd{float}.
Line 7: Even if it’s an integer to us, if it has a period(.), it will always be considered a \icd{float}.

\subsection{Type casting}

Try the following code:

\begin{shell}
\begin{enumerate}
\item int(2.3)
\item int(37.42)
\item float(3)
\end{enumerate}
\end{shell}

Notice how we can change integers to floats and floats to integers using the float() and int() functions. This is very useful if you want to be sure your answer is of a certain type^(2).

\begin{exercise} \textbf{Do integers float?}

\begin{enumerate}[label=\alph*]
\item What type are the following numbers, you can use the type() function:
\begin{enumerate}[label=\roman*]
\item 45 
\item 45/2 
\item math. pi ∗ 4 ∗∗2 
\item math.sqrt(4)
\end{enumerate}
***Don’t forget to import math first!***

\item
\begin{enumerate}[label=\roman*]
\item Declare a variable \icd{x} as your favourite integer.
\item Check the type of \icd{x}.
\item Declare a variable \icd{y} as \icd{x}+1/3.0. What is its type?
\item Convert \icd{x} into a \icd{float} and check its type.
\end{enumerate}
\end{enumerate}
\end{exercise}

\footnote{In older versions of Python, this would give you zero because they swapped division (/) and floor division (//)}
\footnote{In fact, most other programming languages do not allow you to declare a variable without specifying the
exact type it is going to be. Python allows your variable to store anything, this is called “dynamic typing”}

\section{Strings}

A \icd{string} is the data type used by Python to represent text/characters. A character is simply any letter of the alphabet or any symbol or any punctuation including a space. This has to be different from variables. Strings are represented by putting them in quotation marks e.g. ‘Hello World’ or “Python”. Strings in Python are represented as \icd{str}. Let’s practice making strings:

\begin{shell}
‘This is a string’
“This is also a string”
This is not a string          #Why is it not a string?
‘3’
“ERROR!                       #Why is this an error?
‘ ’
‘~’
my_str = “Hello World”
print(my_str)
‘Hello’ + ‘ ’ + ‘World’
‘3 + 5 = ‘ + 8 #Why is this an error?
first_str = ‘Python is’
second_str = ‘AWESOME!’
print(first_str, second_str)
\end{shell}

There are a lot of things we can do with strings, a lot of which we will just mention because you can do all of them in the same way. We will go down the list of the most important things we can do.

\subsection{Concatenation}

Concatenation is when you join two or more strings. This is done using a + in exactly the same way you would add integers but you have to be careful that you are adding two strings together, not a string and some other data type. Let’s do some examples:

\begin{shell}
‘Hello’ + ‘ ’ + ‘World’
‘3 + 5 = ‘ + 8 #Why is this an error?
first_str = ‘Python is’
second_str = ‘AWESOME!’
print(first_str, second_str)
\end{shell}

Notice that a space is also a character. When using the print function, you can put all the strings that you want to concatenate inside the parentheses (round brackets) and it will automatically concatenate the strings and add spaces between them.

\subsection{Functions on strings}

len() – This returns the number of characters in a string as an integer
str() – This is used to type cast a different type into a string

\begin{shell}
len(‘Hello’)
s = ‘We are learning data types’
len(s)
e = 2.71
type(x)
str(e)
type(e)
\end{shell}

\subsection{Indexing}

This is a very important concept in programming used to give the position of something inside a large ordered data structure i.e. something that is organized beforehand. An index is the position of an object among other objects e.g. the position of the character ‘h’ in the string ‘hello world’.
Counting in Python always starts from 0, this is often very annoying for beginners then you will meet languages that start from 1 and you will be even more annoyed. Consider the string ‘hello’:

Character h e l l o
Position  0 1 2 3 4

In our code, we use square brackets [] (no space) to show that we are indexing as shown below:

\begin{shell}
‘Hello’[0]
‘Hello’[1]
s = ‘Python’
s[3]
s[6] #Why is this an error?
s[-1] #You can start counting backwards from -1
s[-2]
s[len(s)] #Why is this an error?
s[len(s) – 1]
\end{shell}

We can do a few more complicated things like indexing a group of characters at once using a “:” (colon) as shown below:

\begin{shell}
w = ‘strings’
w[0:2] #Gives the characters from position 0 to 1
w[:2] #If you leave out the zero it starts from zero
w[2:4]
w[3:-1]
w[4:7] #Why is this an error?
w[:] #this is how you copy the entire string(^3)
\end{shell}

If you add a second colon, you can change the order by using a ‘-1’ to reverse the order.

\footnote{Copying is different from assigning a new variable to the old one because the new value stored in a new lace
in memory.}

\begin{shell}
t = ‘abcde’
t[:2:-1]
r = ‘racecar’
r[2::-1]
r[::-1] #This is called a palindrome, it looks the same even if you reverse it
\end{shell}

\subsection{String methods}

These are functions that allow you to make a modified copy of a string. This is always just a copy, if you want to use it, you have to make sure you store it in a new variable or you replace the old variable. Notice how a method is used, you give your string, add a “.” then put the name of the
function (no spaces). Never forget the parentheses! (brackets). We will show you how to use a few then give a list and what they do in the toolbox.

\begin{shell}
‘Hello’.upper() #Give me text to capital letters(upper case)
s = ‘ELEPHANT’
s.lower() #Give me text in lower case (small letters)
print(s) #s is still the same
s = s.lower() #s is now updated so that it is in lower case
s.islower() #Returns True if all the letters are lower case, False otherwise
s.index (‘e’) #Gives first position of ‘e’
s.index(‘h’)
s.count(‘e’) #Gives the number of occurrences of ‘e’
\end{shell}

To get a full list of all the methods you can use on strings you can go to the python documentation. You can go to the shell and execute help(\icd{str}). If you find it difficult to read, in IDLE you can go to Help > Python Docs > The Python Standard Library > Built-in Types > Text Sequence Type –str > String Methods. I encourage you to look at the documentation.

\begin{toolbox} \textbf{Strings}
\begin{enumerate}
\item Concatenation
\item Indexing
\item len()
\item str()
\item If you have declared a string in a variable called s, you can use these methods:
\item s.upper()
\item s.lower()
\item s.isupper()
\item s.islower()
\item s.index(character)
\item s.count(character)
\end{enumerate}
\end{toolbox}

\section{Boolean types}

To help you make decisions you often need one of two answers, “yes” or “no." This allows you to know when to do something and when not to do something. Similarly, a computer must have something that works the same to know if the answer to some question is “yes” or “no." What are other pairs of words that mean “yes” or “no?" Python has a special data type that only takes 2 values, \icd{True} or \icd{False}. A boolean type can never be any other value, only those two. Notice that in Python, the first letter of \icd{True} and \icd{False} must be in upper case (capital letters).

\begin{shell}
True
False
type(True)
type(true) #Why is this an error?
\end{shell}

Boolean types are usually an answer to a question for example; Do you want to learn how to code? Yes! So a computer needs a way to ask questions and find answers on its own otherwise it can’t do smart things. To ask questions a computer uses certain operators listed below:

\begin{toolbox} \textbf{Comparison Operators}
\begin{enumerate}
\item greater than
\item < less than
\item == is equal to
\item != is not equal to
\item >= is greater than or equal to
\item <= is less than or equal to
\end{enumerate}
\end{toolbox}

Let’s use these below:

\begin{shell}
3 > 5
3.5 < 5
3 == 3
3 > ‘seven’ #Why is this an error?
2.7 < 1
‘h’ == ‘H’ #Why do you get the answer that you get here?
2 >= 2
2 != 2
5 > max(4,5,6)
5 <= min(7,8,9)
‘yes’ == ‘yes’
True == True
False == True
2 >= 3
import math
math.pi <= 2
math.pi == 3.14159326
2.0 == 2.0
17 != ‘seventeen’
\end{shell}

\begin{exercise} \textbf{True or False?}
Write down the answers to these comparison tests and then check if you were correct using the Python Shell.
\begin{enumerate}[label=\roman*]
\item  789 > 789.1 
\item  3 != min(3,4) 
\item  \icd{int}(3.4) == 3 
\item  (9//4) >= (12%5) 
\item  \icd{str}(3) != ‘three’
\end{enumerate}
\end{exercise}

\begin{toolbox} \textbf{Logical operators and chaining comparison tests}	
Let’s add a few more things to our toolbox. What if we want to check many things for example, I will only go to school if all the following things are \icd{True}:

and: If I have my books and if it is not raining – if I don’t have my books I won’t go even if it’s not raining, if it’s not raining I won’t go even if I have my books.

or: If I have my books or if it is not raining – if I have my books I will go even if it is raining. If it is not raining I will go even if I do not have my books.

in: Used to check if a shorter string is in a longer string^(4)
not: This takes the opposite of whatever you put in front of it e.g. not 1>3 is \icd{True}
\end{toolbox}

Let’s do some examples:


\begin{shell}
2 < 3 and 3 < 4
3 == 4 or 3 == 3
‘h’ in ‘hello’
2 != 7 and 12 <= 45
2 < (0 or 3)
not True
(3 < 4 and int(‘three’) == 3) or 12 == 7
2 or 3 #Why does this not make sense?
3 or 2 #Why does this not make sense?
\end{shell}

\begin{exercise} \textbf{Is it and and or or and or or?}
\begin{enumerate}[label=\alph*]
\item Evaluate the following tests manually and then confirm them in a shell
\begin{enumerate}[label=\roman*]
\item  4 != (3 or 4) 
\item  ‘3’ == \icd{str}(3.0) 
\item  347 > 5*45 
\item  5 > len(‘Python’) 
\item  ‘te’ in ‘tea’
\end{enumerate}
\item The function random.random() gives a random \icd{float} between 0 and 1. Simply use it the same
way you would use max/min but make sure the brackets (parentheses) are empty.
\begin{enumerate}[label=\roman*]
\item Import the library random. The same way we did with math in Chapter 2
\item Test the function random.random() by typing it into the shell
\item Declare three variables \icd{x}, \icd{y} and \icd{z} as random numbers between 0 and 1
\item Use the comparison operators (>, < and ==) to find out which one is the biggest and smallest
number.
\item Confirm your answer using the max/min function
\end{enumerate}
\end{enumerate}
\end{exercise}

\section{Variables and Data Types}

We now understand what are called the four primitive data types in Python. These are the most basic ways to store data in a high level programming language. So far we have not been strict about what our variables store, we have just bee assigning values to variables but as a program becomes
more and more complex we have to know which data types we store in our variables.

Consider the following script and explain why it does not work:

\begin{script}
x = 3
y = ‘3’
print(x + y) #Why is this an error?
\end{script}

This is going to be the source of many bugs in your code so it’s important to remember to check your data types. The most useful tool in your scripts is to use the print() and type() functions as in the example:

\begin{script}
X = 74
Y = ‘22’
print(type(Y)) #Tells you what type Y is
\end{script}

You can even do this in the shell after running because Python stores all the declared variables
before the error.
\footnote{This more generally checks if an object is inside a data structure. We will see this in chapter 8}

A common source of this error is when using the input() function. The input function always returns (gives you) a string so if you want to do calculations with the input value you have to type cast it into
a number. Write the following code to understand the source of the error.

Wrong Code:

\begin{script}
x = input('Enter a number: ')
y = 5
print(x*y)
\end{script}

Correct code:

\begin{script}
x = input(‘Enter a number: ‘)
x = int(x) #convert the str to an int
y = 5
print(x*y)
\end{script}

\begin{exercise} \textbf{Hosting a lit Python party}
\begin{enumerate}[label=\alph*]
\item You are planning to host a coding party and you want to sell the tickets for $10 each. Because you are so excited, you want to calculate how much money you are going to make based on how many people are going to come to your party. Write a script that does the following things:
\begin{enumerate}[label=\roman*]
\item Ask the user how many people are coming to the party and store it in a variable (Remember to
name this variable so that it is easy to understand what it stands for and what type it should be).
\item Declare a variable called \icd{price} and set it to 10
\item Make Python print out how much money you are going to make, make sure there is some text
so that you understand what the output is, not just a number.
\end{enumerate}
\item You make a killing from your first coding party and decide this is what you want to do for a living.
So now you want to improve your program so that it works for all the different prices. Change
one line in your code so that it asks the user how much he is going to charge for the party. This is
a beautiful example of abstraction, because we used a variable to abstract a calculation for a
specific situation, we only have to change one line in our code to make it work for all situations.
\item [Supplementary] You want to make your program a bit nicer. Implement (add) as many of the
following features as you can:
\begin{enumerate}[label=\roman*]
\item Make it greet the user first e.g. with “Hello, Party Host”
\item Make it ask how many parties there are going to be and add another output that tells you how
much you are going to make from all the parties.
\end{enumerate}
\end{enumerate}
\end{exercise}